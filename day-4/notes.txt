* blog

User Apis:
- POST   : /user/singup		[done]
- POST   : /user/signin		[done]
- GET    : /user/profile	[done]
- PUT    : /user/profile	[done]
- DELETE : /user/profile	[done]
- POST   : /user/profile/image	[done]

Blog apis:
- GET    : blog							[done]
- GET    : blog/{bid}/rating
- GET    : blog/{bid}/comment					[done]

- POST	 : /blog/{userid}					[done]
- PUT    : /blog/{userid}/{bid}
- DELETE : /blog/{userid}/{bid}					[done]
- POST	 : /blog/{userid}/{bid}/rating
- DELETE : /blog/{userid}/{bid}/rating
- POST	 : /blog/{userid}/{bid}/comment				[done]
- DELETE : /blog/{userid}/{bid}/comment				[done]
- POST	 : /blog/{userid}/{bid}/comment/{commented}/reply       [pending]


* tables
- user
- blog
- comments
- ratings



* queries

create table user (id integer primary  key auto_increment, firstname varchar(100), lastname varchar(100), address varchar(500), email varchar(100), password varchar(150), phone varchar(20), profileImage varchar(100), timestamp timestamp default CURRENT_TIMESTAMP, deleted integer(1));

create table blog (id integer primary key auto_increment, title varchar(200), contents varchar(5000), image varchar(100), userId integer, timestamp timestamp default CURRENT_TIMESTAMP, deleted integer(1));

create table comment (id integer primary key auto_increment, userId integer, blogId integer, comment varchar(5000), timestamp timestamp default CURRENT_TIMESTAMP);

create table rating (id integer primary key auto_increment, userId integer, blogId integer, rating float, timestamp timestamp default CURRENT_TIMESTAMP);



* encryption
- reversible
  - data -> encrypted 
  - encryptedData -> data
  - e.g.

    abcd -> bcde
    bcde -> abcd


- irreversible 
  - once encrypted the data can NOT be decrypted back
  - e.g.

    abcd -> abcdtest1235wsdf -> basdfadsf



* packages
- express: to create a http server
- mysql: to connect to the database
- muller: to upload the file(s) to the server
- morgan: to enable logging
- crypto-js: to encrypt the data
- swagger: to create ui for testing the apis
- jwt: to authorise the API
- passport: to authenticate user


* swagger
> npm install swagger-express swagger-ui-express swagger-jsdoc swagger-express-jsdoc











